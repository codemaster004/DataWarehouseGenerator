#  Entity:
#    path: "./data/file.csv"
#    dependsOn: ["Maybe"]
#    fields:
#      SomeId:
#        autoIncrement: 1
#      Choice:
#        generator: "choice"
#        values: ["Hello", "World"]
#      Number:
#        generator: "number"
#      SomeKey:
#        reference: "Maybe+Key"
#      Default:
#        value: "NULL"
#    variants:
#      Optional:
#        Choice:
#          weights: [ 0.7, 0.3 ]
#        Number:
#          range: [ 0, 100 ]

entities: # Entries that can be generated by the system
  User:
    path: "../data/users.csv"  # path to file for export
    fields:
      Email:
        generator: "email"
        unique: true
      Name:
        generator: "name"
      Surname:
        generator: "surname"
      PasswordHash:
        generator: "hash"
      PhoneNumber:
        generator: "number"
        unique: true
        range: [ 100_000_000, 999_999_999 ]
      isActive:
        generator: "choice"
        values: [ "active", "inactive", "notVerified" ]
      isStaff:
        generator: "choice"
        values: [ true, false ]
      BirthDate:
        generator: "date"
      CreatedAt:
        generator: "date"
        values: "null"
    variants: # For more control over parameters during generation
      User:
        isActive:
          weights: [ 0.9, 0.0, 0.1 ]
        isStaff:
          weights: [ 0, 1 ]
        BirthDate:
          range: [ "2023-01-01", "2024-03-18" ]
      Agent:
        isActive:
          weights: [ 1, 0.0, 0.0 ]
        isStaff:
          weights: [ 1, 0 ]
        BirthDate:
          range: [ "2023-01-01", "2024-03-18" ]
  
  RequestAgent:
    path: "../data/reqAgent.csv"
    dependsOn: [ "Agent", "Request" ]
    fields:
      FK_Email:
        reference: "Agent+EmailAddress"
      FK_RequestId:
        reference: "Request+RequestId"
      Status:
        generator: "choice"
        values: [ "Accepted", "Rejected", "Pending", "NotInterested" ]
        weights: [ 0, 0, 1, 0 ]
  
  Request:
    path: "../data/requests.csv"
    dependsOn: [ "User", "Estate" ]
    fields:
      RequestId:
        autoIncrement: 1
      FK_CreatedBy:
        reference: "User+Email"
      FK_Estate:
        reference: "Estate+EstateId"
      CreatedAt:
        value: "date"
      AskingPrice:
        generator: "number"
      BuyRent:
        generator: "choice"
        values: [ "Buy", "Rent" ]
      isMadeOnline:
        generator: "choice"
        values: [ true, false ]
      isAgentAssigned:
        generator: "choice"
        values: [ true, false ]
        weights: [ 0.2, 0.8 ]

    variants:
      FlatForRent:
        BuyRent:
          weights: [ 0, 1 ]
        AskingPrice:
          range: [ 1_500, 20_000 ]
        isMadeOnline:
          weights: [ 0.9, 0.1 ]
      FlatForSale:
        BuyRent:
          weights: [ 1, 0 ]
        AskingPrice:
          range: [ 50_000, 2_000_000 ]
        isMadeOnline:
          weights: [ 0.8, 0.2 ]
      HouseForRent:
        BuyRent:
          weights: [ 0, 1 ]
        AskingPrice:
          range: [ 5_000, 50_000 ]
        isMadeOnline:
          weights: [ 0.9, 0.1 ]
      HouseForSale:
        BuyRent:
          weights: [ 1, 0 ]
        AskingPrice:
          range: [ 200_000, 10_000_000 ]
        isMadeOnline:
          weights: [ 0.8, 0.2 ]

  Estate:
    path: "../data/estates.csv"
    dependsOn: [ "User", "Address" ]
    fields:
      EstateId:
        autoIncrement: 1
      FK_Address:
        reference: "Address+AddressId"
      EstateType:
        generator: "choice"
        values: [ "House", "Flat" ]
      Area:
        generator: "number"
      NoFloors:
        generator: "choice"
        values: [ "1", "2", "3" ]
      MarketType:
        generator: "choice"
        values: [ "New", "Used", "Old", "Renovated" ]
      DecorCondition:
        generator: "choice"
        values: [ "FullyDecorated", "Unfinished", "InDevelopment", "BareShell" ]
      FK_OwnedBy:
        reference: "User+Email"

    variants:
      House:
        EstateType:
          weights: [ 1, 0 ]
        Area:
          range: [ 50, 500 ]
        NoFloors:
          weights: [ 0.3, 0.6, 0.1 ]
        MarketType:
          weights: [ 0.3, 0.5, 0.1, 0.1 ]
        DecorCondition:
          weights: [ 0.4, 0.3, 0.2, 0.1 ]
      Flat:
        EstateType:
          weights: [ 0, 1 ]
        Area:
          range: [ 20, 250 ]
        NoFloors:
          weights: [ 0.95, 0.05, 0 ]
        MarketType:
          weights: [ 0.4, 0.4, 0.1, 0.1 ]
        DecorCondition:
          weights: [ 0.6, 0.2, 0.1, 0.1 ]

  Agent:
    path: "../data/agents.csv"
    dependsOn: [ "User" ]
    fields:
      Name:
        reference: "User+Name"  # instead of `generator: "name"` use ref to copy value from other table
      Surname:
        reference: "User+Surname"
      PhoneNumber:
        reference: "User+PhoneNumber"
      EmailAddress:
        reference: "User+Email"
      StartDate:
        generator: "date"
        range: [ "2020-01-01", "2021-03-18" ]
      LicenseNumber:
        generator: "number"
        range: [ 10_000, 99_999 ]
      Specialization:
        generator: "choice"
        values: [ "Residential", "Commercial", "Rental" ]
      WorkingHours:
        value: "null"
      AvailabilityStatus:
        generator: "choice"
        values: [ "Available", "Busy", "On Leave" ]
        weights: [ 1, 0, 0 ]
      CommissionFee:
        generator: "float"
        range: [ 1.0, 3.0 ]
        precision: 1
      Remarks:
        value: "null"


  Address:
    path: "../data/address.csv"
    dependsOn: [ "City" ]
    fields:
      AddressId:
        autoIncrement: 1
      FK_City:
        reference: "City+CityId"
      PostCode:
        generator: "number"
        range: [ 10_000, 99_999 ]
      StreetName:
        generator: "street"
      StreetNumber:
        generator: "number"
        range: [ 0, 100 ]
      Lat:
        generator: "number"
        range: [ -180, 180 ]
      Long:
        generator: "number"
        range: [ -90, 90 ]

  City:
    path: "../data/city.csv"
    fields:
      CityId:
        autoIncrement: 1
      CityName:
        generator: "choice"
        values: [ "Gdansk", "Gdynia", "Sopot" ]
      District:
        generator: "district"

    variants:
      Gdansk:
        CityName:
          weights: [ 1, 0, 0 ]
        District:
          city: "Gdansk"
      Gdynia:
        CityName:
          weights: [ 0, 1, 0 ]
        District:
          city: "Gdynia"
      Sopot:
        CityName:
          weights: [ 0, 0, 1 ]
        District:
          city: "Sopot"


  Form:
    path: "../data/form.csv"
    dependsOn: [ "User" ]
    fields:
      IsSuccessful:
        generator: "choice"
        values: [ true, false ]
      DateOfBirth:
        generator: "date"
        range: [ "2023-01-01", "2024-03-18" ]
      AccountCreated:
        generator: "choice"
        values: [ true, false ]
      IsCreatedOnline:
        generator: "choice"
        values: [ true, false ]
      RequestType:
        generator: "choice"
        values: [ "Sale", "Rent" ]
      #      RequestStartTime:
      #        generator: "null" #todo create a generator for datatime
      #      RequestSubmissionTime:
      #        generator: "null" #todo create a generator for datatime
      CreatedBy:

    variants:
      AccountCreated:
        DateOfBirth:
          reference: "User+BirthDate"
        AccountCreated:
          weights: [ 1, 0 ]
        IsCreatedOnline:
          weights: [ 0.9, 0.1 ]
        RequestType:
          weights: [ 0.6, 0.4 ]
        CreatedBy:
          reference: "User+Email"

      AccountNotCreated:
        IsSuccessful:
          weights: [ 0, 1 ]
        AccountCreated:
          weights: [ 0, 1 ]
        IsCreatedOnline:
          weights: [ 0.7, 0.3 ]
        RequestType:
          weights: [ 0.6, 0.4 ]
        CreatedBy:
          value: "Anonymous"
