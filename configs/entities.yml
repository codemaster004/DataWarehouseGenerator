#  Entity:
#    path: "./data/file.csv"
#    dependsOn: ["Maybe"]
#    fields:
#      SomeId:
#        autoIncrement: 1
#      Choice:
#        generator: "choice"
#        values: ["Hello", "World"]
#      Number:
#        generator: "number"
#      SomeKey:
#        reference: "Maybe+Key"
#      Default:
#        value: "NULL"
#    variants:
#      Optional:
#        Choice:
#          weights: [ 0.7, 0.3 ]
#        Number:
#          range: [ 0, 100 ]

entities:  # Entries that can be generated by the system
  User:
    path: "./data/users.csv"  # path to file for export
    fields:
      Email:
        generator: "email"
        unique: true
      Name:
        generator: "name"
      Surname:
        generator: "surname"
      PassHash:
        generator: "hash"
      PhoneNumber:
        generator: "number"
        unique: true
        range: [ 100_000_000, 999_999_999 ]
      IsActive:
        generator: "choice"
        values: [ "active", "inactive", "notVerified" ]
      IsStaff:
        generator: "choice"
        values: [ true, false ]
      BirthDate:
        generator: "date"
    variants:  # For more control over parameters during generation
      User:
        IsActive:
          weights: [ 0.9, 0.0, 0.1 ]
        IsStaff:
          weights: [ 0, 1 ]
        BirthDate:
          range: ["01-01-2023", "18-03-2024"]
      Agent:
        IsActive:
          weights: [ 1, 0.0, 0.0 ]
        IsStaff:
          weights: [ 1, 0 ]
        BirthDate:
          range: [ "01-01-2023", "18-03-2024" ]

  Request:
    dependsOn: ["User", "Estate", "Agent"]
    fields:
      RequestId:
        autoIncrement: 1
      CreatedBy:
        reference: "User+Email"
      OverseenBy:
#        reference: "Agent+Email"
        value: "null"
      OnEstate:
        reference: "Estate+EstateId"
      CreatedAt:
        value: "date"
      AskingPrice:
        generator: "number"
      BuyRent:
        generator: "choice"
        values: [ "Buy", "Rent" ]
      ReqStatus:
        generator: "choice"
        values: [ "Accepted", "Rejected", "Pending", "NotAssigned"]
      IsMadeOnline:
        generator: "choice"
        values: [ true, false ]

    variants:
      FlatForRent:
        BuyRent:
          weights: [ 0, 1 ]
        ReqStatus:
          weights: [ 0, 0, 1, 0 ]
        AskingPrice:
          range: [ 1_500, 20_000]
        IsMadeOnline:
          weights: [ 0.9, 0.1 ]
      FlatForSale:
        BuyRent:
          weights: [ 1, 0 ]
        ReqStatus:
          weights: [ 0, 0, 1, 0 ]
        AskingPrice:
          range: [ 50_000, 2_000_000 ]
        IsMadeOnline:
          weights: [ 0.8, 0.2 ]
      HouseForRent:
        BuyRent:
          weights: [ 0, 1 ]
        ReqStatus:
          weights: [ 0, 0, 1, 0 ]
        AskingPrice:
          range: [ 5_000, 50_000 ]
        IsMadeOnline:
          weights: [ 0.9, 0.1 ]
      HouseForSale:
        BuyRent:
          weights: [ 1, 0 ]
        ReqStatus:
          weights: [ 0, 0, 1, 0 ]
        AskingPrice:
          range: [ 200_000, 10_000_000 ]
        IsMadeOnline:
          weights: [ 0.8, 0.2 ]

  Estate:
    dependsOn: ["User"]
    fields:
      EstateId:
        autoIncrement: 1
      EstateType:
        generator: "choice"
        values: [ "House", "Flat" ]
      Area:
        generator: "number"
      NoFloors:
        generator: "choice"
        values: [ "1", "2", "3" ]
      MarketType:
        generator: "choice"
        values: [ "New", "Used", "Old", "Renovated"]
      DecorCondition:
        generator: "choice"
        values: [ "FullyDecorated", "Unfinished", "InDevelopment", "BareShell"]
      OwnedBy:
        reference: "User+Email"

    variants:  
      House:
        EstateType:
          weights: [ 1, 0 ]
        Area:
          range: [ 50, 500 ]
        NoFloors:
          weights: [ 0.3, 0.6, 0.1 ]
        MarketType:
          weights: [ 0.3, 0.5, 0.1, 0.1]
        DecorCondition:
          weights: [ 0.4, 0.3, 0.2, 0.1 ]
      Flat:
        EstateType:
          weights: [ 0, 1 ]
        Area:
          range: [ 20, 250 ]
        NoFloors:
          weights: [ 0.95, 0.05, 0 ]
        MarketType:
          weights: [ 0.4, 0.4, 0.1, 0.1 ]
        DecorCondition:
          weights: [ 0.6, 0.2, 0.1, 0.1 ]

  Agent:
    path: "./..."  # todo
    dependsOn: ["User"]
    fields:
      Name:
        reference: "User+Name"  # instead of `generator: "name"` use ref to copy value from other table
      Surname:
        reference: "User+Surname"
      PhoneNumber:
        reference: "User+PhoneNumber"
      EmailAddress:
        reference: "User+Email"
      StartDate:
        generator: "date"
        range: [ "01-01-2020", "18-03-2021" ]

  Address:
    dependsOn: ["User", "City"]
    fields:
      AddressID:
        autoIncrement: 1
      City:
        reference: "City+CityID"
      PostCode:
        generator: "number"
        range: [ 10_000, 99_999 ]
      StreetName:
        generator: "null" #todo jak generujemy nazwy?
      StreetNumber:
        generator: "number"
        range: [ 0, 100]
      Lat:
        generator: "number"
        range: [ -180, 180 ]
      Long:
        generator: "number"
        range: [ -90, 90 ]

  City:
    fields:
      CityID:
        autoIncrement: 1
      CityName:
        generator: "null" #todo jak generujemy nazwy?
      District:
        generator: "null" #todo jak generujemy nazwy?

